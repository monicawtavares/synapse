{
	"name": "LoadBronzeLayer - Copy",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ChemonicsSpkPl",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "88edbc56-5792-4e8a-9a34-f7ac64825e13"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/cac456ac-e3db-41a1-8f9c-a6dc9fe183f8/resourceGroups/data-platform-rg/providers/Microsoft.Synapse/workspaces/chempdpsynapse01/bigDataPools/ChemonicsSpkPl",
				"name": "ChemonicsSpkPl",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				}
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load Bronze Layer\r\n",
					"Author: Sushanth Manne  \r\n",
					"Created Date: 2021-04-13  \r\n",
					"Description: Notebook to load data in Bronze Zone from External Upload Folder\r\n",
					"\r\n",
					"Prerequisites:  \r\n",
					"\r\n",
					"Input Variables:  \r\n",
					"- datepath"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true,
					"tags": [
						"parameters"
					]
				},
				"source": [
					"datepath = \"2021/04/15\""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.functions import current_date\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pyspark.sql import functions as F"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"source_path = 'abfss://externalupload@chempdpadls02.dfs.core.windows.net/Processed/'+ datepath +'/Final_PLTC/'\r\n",
					"error_path = 'abfss://externalupload@chempdpadls02.dfs.core.windows.net/Errors/'+ datepath +'/'\r\n",
					"noRecord_path = 'abfss://externalupload@chempdpadls02.dfs.core.windows.net/Empty/'+ datepath +'/'\r\n",
					"dest_path = 'abfss://bronze@chempdpadls02.dfs.core.windows.net/EDWDATA/'+ datepath \r\n",
					"\r\n",
					"files = mssparkutils.fs.ls(source_path)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"for file in files:\r\n",
					"    \r\n",
					"    fileName = file.name.split('.')[1]\r\n",
					"\r\n",
					"    if file.name.endswith('.csv'):\r\n",
					"\r\n",
					"        print(file.name, file.isDir, file.isFile, file.path, file.size)\r\n",
					"        filedestpath = dest_path +'/'+ fileName\r\n",
					"        df = spark.read.csv(file.path,header ='True')\r\n",
					"\r\n",
					"        if len(df.columns) == 1:\r\n",
					"            fileErrorPath = error_path + fileName + '.csv'\r\n",
					"            df.write.csv(path=fileErrorPath, mode='overwrite')\r\n",
					"            \r\n",
					"        elif df.count() == 0:\r\n",
					"            fileNoRecordPath = noRecord_path + fileName + '.csv'\r\n",
					"            df.write.csv(path=fileNoRecordPath, mode='overwrite')\r\n",
					"        \r\n",
					"        else:\r\n",
					"\r\n",
					"            try:\r\n",
					"                for col in df.columns:\r\n",
					"                    df = df.withColumnRenamed(col, col.replace(' ',''))\r\n",
					"                df.write.format(\"parquet\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(filedestpath)\r\n",
					"\r\n",
					"            except:\r\n",
					"                fileErrorPath = error_path + fileName + '.csv'\r\n",
					"                df.write.csv(path=fileErrorPath, mode='overwrite')"
				],
				"execution_count": 4
			}
		]
	}
}