{
	"name": "neuacc-odp-logging",
	"properties": {
		"folder": {
			"name": "DataPlatform/logging"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "95d70ac0-1802-41f7-9b22-b7bcbcebc394"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"## neuacc-odp-logging\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def append_error_log(data,category):\n",
					"        from pyspark.sql import functions as F\n",
					"        columns = ['table_name', 'error_message']\n",
					"        # Create DataFrame\n",
					"        df = spark.createDataFrame(data, schema=columns)\n",
					"\n",
					"        # Add current timestamp column\n",
					"        df = df.withColumn('timestamp', current_timestamp()).withColumn(\"table_category\", F.lit(str(category)))\n",
					"\n",
					"        # Ensure the database 'frameworkdb' exists\n",
					"        spark.sql(\"CREATE DATABASE IF NOT EXISTS frameworkdb\")\n",
					"\n",
					"        # Append the DataFrame to the Delta table 'frameworkdb.errorlogging'\n",
					"        df.write.format(\"delta\").mode(\"append\").saveAsTable(\"frameworkdb.errorlogging\")\n",
					""
				],
				"execution_count": null
			}
		]
	}
}