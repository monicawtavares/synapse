{
	"name": "zzzCopy_BronzetoSilverParquettoDelta",
	"properties": {
		"folder": {
			"name": "DailyDelta"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ChemonicsSpkPl",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "006fff16-8f01-40bb-bdcb-c82fdbf23677"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/cac456ac-e3db-41a1-8f9c-a6dc9fe183f8/resourceGroups/data-platform-rg/providers/Microsoft.Synapse/workspaces/chempdpsynapse01/bigDataPools/ChemonicsSpkPl",
				"name": "ChemonicsSpkPl",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				}
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load from ODSPRD to Silver Zone\r\n",
					"Author: Sushanth Manne  \r\n",
					"Created Date: 2021-04-14  \r\n",
					"Description: Notebook to load Full Refresh tables from Bronze to Silver Layer.\r\n",
					"\r\n",
					"Prerequisites:  \r\n",
					"\r\n",
					"Input Variables:  \r\n",
					"- datePath"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true,
					"tags": [
						"parameters"
					]
				},
				"source": [
					"datepath = \"\""
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.functions import current_date\r\n",
					"from notebookutils import mssparkutils\r\n",
					""
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"source_path = 'abfss://odsprd@chempdpadls02.dfs.core.windows.net/EDWDATA/'+ datepath +'/'\r\n",
					"dest_path   = 'abfss://silver@chempdpadls02.dfs.core.windows.net/EDWDATA' "
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"#mssparkutils(source_path)"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"source": [
					"files = mssparkutils.fs.ls(source_path)\r\n",
					"\r\n",
					"for file in files:\r\n",
					"\r\n",
					"    if file.name.endswith('parquet'):\r\n",
					"\r\n",
					"        print(file.name, file.isDir, file.isFile, file.path, file.size)\r\n",
					"        #print(file.name)\r\n",
					"        ##a = file.name.split('_')[1]\r\n",
					"        filesourcepath = file.path \r\n",
					"        filedestpath = dest_path +'/'+ file.name.split('.')[0] ##+'/'\r\n",
					"        print(filesourcepath)\r\n",
					"        df=spark.read.format('parquet').load(filesourcepath)\r\n",
					"        df.write.format('delta').mode('overwrite').save(filedestpath)\r\n",
					"        print(filedestpath)\r\n",
					"        ##df.schema\r\n",
					"        ##df.write.format('delta').option('mergeSchema','true').save(filedestpath)\r\n",
					"        ##display(df.limit(10))\r\n",
					"        ##df.schema\r\n",
					"         ##insert_df.write.format('delta').mode(\"APPEND\").option('mergeSchema', 'true').option(\"path\", persistenceDataPath).saveAsTable(db+'.'+tableName)"
				],
				"execution_count": 28
			}
		]
	}
}